{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.6", "generated_at": "2025-06-04T13:40:13.728115Z", "invocation_id": "fe8d34ac-c531-4a86-b57d-6d25e9938636", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:06.743786Z", "completed_at": "2025-06-04T13:40:06.750394Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:06.750845Z", "completed_at": "2025-06-04T13:40:06.854655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16289782524108887, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_dim_campaigns", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"campaign_master\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_dim_campaigns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:06.911057Z", "completed_at": "2025-06-04T13:40:06.913942Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:06.914490Z", "completed_at": "2025-06-04T13:40:07.015443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18448305130004883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_dim_customers", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"customers_master\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_dim_customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:07.102374Z", "completed_at": "2025-06-04T13:40:07.118786Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:07.121173Z", "completed_at": "2025-06-04T13:40:07.229914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20017480850219727, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_dim_drivers", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"drivers_master\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_dim_drivers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:07.310979Z", "completed_at": "2025-06-04T13:40:07.320622Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:07.322380Z", "completed_at": "2025-06-04T13:40:07.488302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28815722465515137, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_dim_restaurants", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"restaurants_master\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_dim_restaurants\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:07.602276Z", "completed_at": "2025-06-04T13:40:07.612818Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:07.614833Z", "completed_at": "2025-06-04T13:40:07.738024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25099778175354004, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_log_customer_app_sessions", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"order_log_incentive_sessions_customer_app_sessions\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_log_customer_app_sessions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:07.853031Z", "completed_at": "2025-06-04T13:40:07.855469Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:07.856208Z", "completed_at": "2025-06-04T13:40:07.937352Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19385290145874023, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_log_driver_incentive", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"order_log_incentive_sessions_driver_incentive_logs\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_log_driver_incentive\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:08.058107Z", "completed_at": "2025-06-04T13:40:08.073669Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:08.075929Z", "completed_at": "2025-06-04T13:40:08.206443Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20596027374267578, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_log_order_status", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"order_log_incentive_sessions_order_status_logs\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_log_order_status\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:08.263863Z", "completed_at": "2025-06-04T13:40:08.266049Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:08.266368Z", "completed_at": "2025-06-04T13:40:08.365836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17438936233520508, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_log_support_ticket_status", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"support_ticket_status_logs\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_log_support_ticket_status\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:08.443140Z", "completed_at": "2025-06-04T13:40:08.445749Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:08.446084Z", "completed_at": "2025-06-04T13:40:08.570185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23462772369384766, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_transaction_campaign_interactions", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"campaign_interactions\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_transaction_campaign_interactions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:08.695627Z", "completed_at": "2025-06-04T13:40:08.707589Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:08.719950Z", "completed_at": "2025-06-04T13:40:08.816864Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23865079879760742, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_transaction_orders", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"order_transactions\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_transaction_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:08.937455Z", "completed_at": "2025-06-04T13:40:08.941170Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:08.941868Z", "completed_at": "2025-06-04T13:40:09.036849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15047264099121094, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_transaction_support_tickets", "compiled": true, "compiled_code": "SELECT *\nFROM \"ae_exam_db\".\"main\".\"support_tickets\"", "relation_name": "\"ae_exam_db\".\"main\".\"model_transaction_support_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:09.089406Z", "completed_at": "2025-06-04T13:40:09.091949Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:09.092240Z", "completed_at": "2025-06-04T13:40:09.212594Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20395326614379883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_driver_incentive_logs", "compiled": true, "compiled_code": "\n\nSELECT \n\tdi.driver_id,\n\tdm.active_status,\n\tdm.driver_rating,\n\tdi.incentive_program,\n\tdi.bonus_amount,\n\tdi.delivery_target,\n\tdi.actual_deliveries,\n\tdi.bonus_qualified\nFROM \"ae_exam_db\".\"main\".\"model_log_driver_incentive\" di \nJOIN \"ae_exam_db\".\"main\".\"model_dim_drivers\" dm\nON dm.driver_id = di.driver_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_incentive_logs\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:09.297503Z", "completed_at": "2025-06-04T13:40:09.301339Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:09.301721Z", "completed_at": "2025-06-04T13:40:09.464962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25876760482788086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_campaign_interactions", "compiled": true, "compiled_code": "\n\nSELECT  \n\tci.interaction_id,\n\tci.interaction_datetime,\n\tEXTRACT(YEAR FROM ci.interaction_datetime) AS year,\n\tEXTRACT(MONTH FROM ci.interaction_datetime) AS month,\n\tCASE \n\t\tWHEN EXTRACT(DOW FROM ci.interaction_datetime) IN (0, 6) \n    \tTHEN 'Weekend' ELSE 'Weekday' \n    END as day_type,\n\tCASE \n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 1 THEN 'Monday'\n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 2 THEN 'Tuesday'\n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 3 THEN 'Wednesday'\n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 4 THEN 'Thursday'\n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 5 THEN 'Friday'\n        WHEN EXTRACT(DOW FROM ci.interaction_datetime) = 6 THEN 'Saturday'\n        ELSE 'Sunday'\n    END as day_name,\n\tci.campaign_id,\n\tci.customer_id,\n\tc.customer_segment,\n\tc.status AS customer_status, \n\tci.order_id,\n\tcm.campaign_name,\n\tcm.campaign_type,\n\tcm.start_date AS campaign_start_date,\n\tcm.end_date AS campaign_end_date,\n\tcm.budget AS campaign_budget,\n\tcm.cost_model,\n\tcm.objective AS campaign_objective,\n\tcm.channel,\n\tcm.targeting_strategy,\n\tcm.is_active AS campaign_status,\n\tci.event_type,\n\tci.platform,\n\tci.device_type,\n\tci.ad_cost,\n\tci.revenue,\n\tci.is_new_customer,\n\tot.order_datetime,\n\tot.delivery_datetime,\n\tot.order_status,\n\tCASE \n\t\tWHEN ci.order_id IS NOT NULL AND order_datetime IS NOT NULL \n\t\tTHEN DATEDIFF('minute', ci.interaction_datetime, ot.order_datetime)\n\tEND as minutes_to_conversion,\n\tCASE \n\t\tWHEN ci.order_id IS NOT NULL AND order_status = 'completed' \n\t\tTHEN DATEDIFF('minute', ci.interaction_datetime, ot.order_datetime)\n\tEND as minutes_to_purchase\nFROM \"ae_exam_db\".\"main\".\"model_transaction_campaign_interactions\" AS ci \nJOIN \"ae_exam_db\".\"main\".\"model_dim_campaigns\" AS cm \nON ci.campaign_id = cm.campaign_id\nJOIN \"ae_exam_db\".\"main\".\"model_transaction_orders\" AS ot \nON ot.order_id = ci.order_id \nJOIN \"ae_exam_db\".\"main\".\"model_dim_customers\" AS c \nON c.customer_id = ci.customer_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:09.558563Z", "completed_at": "2025-06-04T13:40:09.561473Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:09.561777Z", "completed_at": "2025-06-04T13:40:09.804140Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28972601890563965, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_driver_order_transactions", "compiled": true, "compiled_code": "\n\nSELECT \n\tdm.driver_id,\n\tdm.vehicle_type,\n\tdm.region AS driver_region,\n\tr.city,\n\tdm.active_status,\n\tdm.driver_rating,\n\tot.order_id,\n\tot.order_datetime,\n\tot.pickup_datetime,\n\tot.delivery_datetime,\n\tot.order_status,\n\tot.delivery_zone,\n\tot.total_amount,\n\tot.is_late_delivery,\n\tot.delivery_distance_km,\n    DATEDIFF('minute', pickup_datetime, delivery_datetime) AS delivery_minutes\nFROM \"ae_exam_db\".\"main\".\"model_transaction_orders\" ot \nLEFT JOIN \"ae_exam_db\".\"main\".\"model_dim_drivers\" dm \nON ot.driver_id = dm.driver_id\nLEFT JOIN \"ae_exam_db\".\"main\".\"model_dim_restaurants\" r \nON r.restaurant_id = ot.restaurant_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_order_transactions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:09.850734Z", "completed_at": "2025-06-04T13:40:09.853327Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:09.853623Z", "completed_at": "2025-06-04T13:40:09.996140Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2588815689086914, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_interacting_customer_orders", "compiled": true, "compiled_code": "\n\nWITH customer_interactions AS (\n\tSELECT DISTINCT customer_id\n\tFROM \"ae_exam_db\".\"main\".\"model_transaction_campaign_interactions\" ci \n)\nSELECT \n\torder_id,\n\tot.customer_id,\n\trestaurant_id,\n\tdriver_id,\n\torder_datetime,\n\tpickup_datetime,\n\tdelivery_datetime,\n\torder_status,\n\ttotal_amount \nFROM \"ae_exam_db\".\"main\".\"model_transaction_orders\" ot \nJOIN customer_interactions ci \nON ot.customer_id = ci.customer_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_interacting_customer_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:10.113793Z", "completed_at": "2025-06-04T13:40:10.118241Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:10.119529Z", "completed_at": "2025-06-04T13:40:10.248372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2431964874267578, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_driver_related_tickets", "compiled": true, "compiled_code": "\n\nSELECT \n\tot.driver_id,\n\tst.ticket_id,\n    ot.order_id,\n\tissue_type,\n\tissue_sub_type,\n\topened_datetime,\n\tresolved_datetime,\n\tcsat_score,\n\tdm.driver_rating,\n    CASE WHEN status = 'resolved' THEN DATEDIFF('hour', opened_datetime, resolved_datetime) END AS resolved_duration_hours\nFROM \"ae_exam_db\".\"main\".\"model_transaction_orders\" AS ot \nLEFT JOIN \"ae_exam_db\".\"main\".\"model_transaction_support_tickets\" st \nON ot.order_id = st.order_id\nLEFT JOIN \"ae_exam_db\".\"main\".\"model_dim_drivers\" dm \nON st.driver_id = dm.driver_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_driver_related_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:10.358373Z", "completed_at": "2025-06-04T13:40:10.361404Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:10.361757Z", "completed_at": "2025-06-04T13:40:10.478184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22883200645446777, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_restaurant_related_tickets", "compiled": true, "compiled_code": "\n\nSELECT \n\tticket_id,\n\tot.restaurant_id,\n\tot.customer_id,\n\tot.order_id,\n\tissue_type,\n\tissue_sub_type,\n\tcompensation_amount,\n\topened_datetime, \n\tresolved_datetime,\n    order_datetime,\n    order_status,\n    CASE WHEN status = 'resolved' THEN DATEDIFF('hour', opened_datetime, resolved_datetime) END AS resolved_duration_hours\nFROM \"ae_exam_db\".\"main\".\"model_transaction_orders\" AS ot\nLEFT JOIN \"ae_exam_db\".\"main\".\"model_transaction_support_tickets\" st \nON ot.order_id = st.order_id\nLEFT JOIN \"ae_exam_db\".\"main\".\"model_dim_restaurants\" rm \nON st.restaurant_id = rm.restaurant_id", "relation_name": "\"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_restaurant_related_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:10.590036Z", "completed_at": "2025-06-04T13:40:10.592643Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:10.593071Z", "completed_at": "2025-06-04T13:40:10.657820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13576316833496094, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.model_mart_support_tickets", "compiled": true, "compiled_code": "\n\nSELECT \n\tticket_id,\n\tEXTRACT(YEAR FROM opened_datetime) AS year,\n\tEXTRACT(MONTH FROM opened_datetime) AS month,\n\tCASE \n\t\tWHEN EXTRACT(DOW FROM opened_datetime) IN (0, 6) \n    \tTHEN 'Weekend' ELSE 'Weekday' \n    END as day_type,\n\tCASE \n        WHEN EXTRACT(DOW FROM opened_datetime) = 1 THEN 'Monday'\n        WHEN EXTRACT(DOW FROM opened_datetime) = 2 THEN 'Tuesday'\n        WHEN EXTRACT(DOW FROM opened_datetime) = 3 THEN 'Wednesday'\n        WHEN EXTRACT(DOW FROM opened_datetime) = 4 THEN 'Thursday'\n        WHEN EXTRACT(DOW FROM opened_datetime) = 5 THEN 'Friday'\n        WHEN EXTRACT(DOW FROM opened_datetime) = 6 THEN 'Saturday'\n        ELSE 'Sunday'\n    END as day_name,\n    issue_type,\n    issue_sub_type,\n    opened_datetime,\n    resolved_datetime,\n    status,\n    csat_score,\n    compensation_amount,\n    CASE WHEN status = 'resolved' THEN DATEDIFF('hour', opened_datetime, resolved_datetime) END AS resolved_duration_hours\nFROM \"ae_exam_db\".\"main\".\"model_transaction_support_tickets\"", "relation_name": "\"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_support_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:10.728662Z", "completed_at": "2025-06-04T13:40:10.731047Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:10.731321Z", "completed_at": "2025-06-04T13:40:10.790180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11147880554199219, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_incentive_bonus_per_driver", "compiled": true, "compiled_code": "\n\nSELECT \n\tdriver_id,\n\tSUM(CASE WHEN bonus_qualified = TRUE THEN bonus_amount ELSE 0 END) AS total_bonus_paid\nFROM \"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_incentive_logs\" \nGROUP BY \n\tdriver_id", "relation_name": "\"ae_exam_db\".\"main_report_fleet_management\".\"report_incentive_bonus_per_driver\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:10.844781Z", "completed_at": "2025-06-04T13:40:10.847432Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:10.847775Z", "completed_at": "2025-06-04T13:40:10.953583Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22350478172302246, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_incentive_program_inpact", "compiled": true, "compiled_code": "\n\nSELECT \n    incentive_program,\n    COUNT(DISTINCT driver_id) AS total_drivers_participating,\n    COUNT(DISTINCT CASE WHEN active_status = 'active' THEN driver_id END) AS total_active_drivers_participating,\n    SUM(delivery_target) AS total_target_deliveries,\n    SUM(actual_deliveries) AS total_actual_deliveries,\n    ROUND(SUM(bonus_amount), 2) AS total_bonus_investment,\n    SUM(CASE WHEN bonus_qualified = TRUE THEN bonus_amount ELSE 0 END) AS total_bonus_paid,\n    ROUND(AVG(driver_rating), 2) AS avg_driver_rating\nFROM \"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_incentive_logs\" \nGROUP BY incentive_program", "relation_name": "\"ae_exam_db\".\"main_report_fleet_management\".\"report_incentive_program_inpact\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:11.072761Z", "completed_at": "2025-06-04T13:40:11.076508Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:11.076904Z", "completed_at": "2025-06-04T13:40:11.233273Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.28171586990356445, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_campaign_effectiveness", "compiled": true, "compiled_code": "\n\nWITH overall_campaign_analysis AS (\nSELECT \n\tcampaign_id,\n\tcampaign_name,\n\tcampaign_type,\n\tcampaign_objective,\n\tcost_model,\n\tSUM(ad_cost) AS total_campaign_cost,\n\tSUM(CASE WHEN order_status = 'completed' THEN revenue ELSE 0 END) AS total_revenue,\n\tCOUNT(DISTINCT customer_id) as customers_reached,\n\tCOUNT(DISTINCT CASE \n        WHEN order_id IS NOT NULL AND order_status = 'completed' \n        THEN customer_id \n    END) as customers_purchased,\n    COUNT(DISTINCT CASE \n        WHEN order_status = 'completed' AND is_new_customer = TRUE \n        THEN customer_id \n    END) AS new_customers_acquired,\n    COUNT(CASE WHEN event_type = 'impression' THEN 1 END) as total_impressions,\n    COUNT(CASE WHEN event_type = 'click' THEN 1 END) as total_clicks,\n    COUNT(CASE WHEN event_type = 'conversion' THEN 1 END) as total_conversions\nFROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\" \nGROUP BY \n\tcampaign_id,\n\tcampaign_name,\n\tcampaign_type,\n\tcampaign_objective,\n\tcost_model\n)\nSELECT \n\tcampaign_id,\n\tcampaign_name,\n\tcampaign_type,\n\tcampaign_objective,\n\ttotal_impressions,\n    total_clicks,\n    total_conversions,\n\ttotal_campaign_cost,\n\ttotal_revenue,\n\tcustomers_reached,\n\tcustomers_purchased,\n\tCASE \n        WHEN customers_reached > 0 \n        THEN ROUND((customers_purchased::FLOAT / customers_reached::FLOAT) * 100, 2)\n        ELSE 0 \n    END AS purchase_rate_pct,\n    CASE \n        WHEN customers_reached > 0 \n        THEN ROUND((new_customers_acquired::FLOAT / customers_reached::FLOAT) * 100, 2) \n    END AS new_customer_acquisition_rate_pct,\n\tCASE \n        WHEN total_campaign_cost > 0 \n        THEN ROUND(total_revenue / total_campaign_cost, 2)\n        ELSE 0 \n    END AS return_on_ad_spend,\n    CASE \n        WHEN new_customers_acquired > 0 \n        THEN ROUND(total_campaign_cost / new_customers_acquired, 2)\n        ELSE NULL \n    END AS cost_per_acquired_customer\nFROM overall_campaign_analysis", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_campaign_effectiveness\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:11.361234Z", "completed_at": "2025-06-04T13:40:11.367116Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:11.368165Z", "completed_at": "2025-06-04T13:40:11.489302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19422554969787598, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_campaign_performance_trend", "compiled": true, "compiled_code": "\n\nWITH daily_campaign_metrics AS (\nSELECT\n    DATE(interaction_datetime) as interaction_date,\n    year,\n    month,\n    day_type,\n    day_name,\n    campaign_id,\n    campaign_name,\n    campaign_type,\n    COUNT(CASE WHEN event_type = 'impression' THEN 1 END) AS daily_impressions,\n    COUNT(CASE WHEN event_type = 'click' THEN 1 END) AS daily_clicks,\n    COUNT(CASE WHEN event_type = 'conversion' THEN 1 END) AS daily_conversions,\n    COUNT(DISTINCT customer_id) AS customers_reached,\n    COUNT(DISTINCT CASE \n        WHEN order_id IS NOT NULL AND order_status = 'completed' \n        THEN customer_id \n    END) AS customers_purchased,\n    COUNT(DISTINCT CASE \n        WHEN order_status = 'completed' AND is_new_customer = TRUE THEN customer_id \n    END) AS new_customers_acquired,\n    SUM(ad_cost) AS daily_cost,\n    SUM(CASE \n        WHEN order_status = 'completed' THEN revenue ELSE 0 \n    END) AS daily_revenue,\n    COUNT(DISTINCT CASE \n        WHEN order_status = 'completed' THEN order_id \n    END) AS completed_orders\nFROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\" mpm \nGROUP BY \n    DATE(interaction_datetime), \n    year, \n    month, \n    day_type, \n    day_name,\n    campaign_id, \n    campaign_name, \n    campaign_type\n)\nSELECT \n\tinteraction_date,\n\tyear,\n    month,\n    day_type,\n    day_name,\n    campaign_id,\n    campaign_name,\n    campaign_type,\n    daily_impressions,\n    daily_clicks,\n    daily_conversions,\n    customers_reached,\n    customers_purchased,\n    daily_cost,\n    daily_revenue,\n    completed_orders,\n    CASE \n        WHEN customers_reached > 0 \n        THEN ROUND((customers_purchased::FLOAT / customers_reached::FLOAT) * 100, 2)\n        ELSE 0 \n    END AS purchase_rate_pct,\n    CASE \n        WHEN daily_cost > 0 \n        THEN ROUND(daily_revenue / daily_cost, 2)\n        ELSE 0 \n    END AS daily_roas,\n    CASE \n        WHEN new_customers_acquired > 0 \n        THEN ROUND(daily_cost / new_customers_acquired, 2)\n        ELSE NULL \n    END AS daily_cpa\nFROM daily_campaign_metrics", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_campaign_performance_trend\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:11.557776Z", "completed_at": "2025-06-04T13:40:11.561139Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:11.561447Z", "completed_at": "2025-06-04T13:40:11.842387Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3438882827758789, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_customer_acquisition", "compiled": true, "compiled_code": "\n\nWITH new_customer_orders AS (\n    SELECT \n        customer_id,\n        campaign_id,\n        campaign_name,\n        campaign_type, \n        order_id,\n        order_datetime,\n        revenue,\n        ROW_NUMBER() OVER (PARTITION BY customer_id, campaign_id ORDER BY order_datetime) as order_sequence\n    FROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\" \n    WHERE is_new_customer = TRUE \n      AND order_status = 'completed'        \n),\ncustomer_spending_summary AS (\n    SELECT \n        customer_id,\n        campaign_id,\n        campaign_name,\n        campaign_type,\n        AVG(revenue) as avg_purchase_value,\n        COUNT(CASE WHEN order_sequence > 1 THEN 1 END) as repeat_orders,\n        CASE \n            WHEN COUNT(*) > 1 \n            THEN DATEDIFF('day', MIN(order_datetime), MAX(order_datetime)) \n            ELSE 0 \n        END as days_active\n    FROM new_customer_orders\n    GROUP BY customer_id, campaign_id, campaign_name, campaign_type\n)\n, purchase_duration AS (\n\tSELECT \n\t\tcampaign_id,\n        campaign_name,\n        campaign_type, \n        AVG(minutes_to_purchase) AS avg_minutes_to_purchase,\n        SUM(ad_cost) AS total_cost\n\tFROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\"\n\tWHERE is_new_customer = TRUE \n\tAND order_status = 'completed'           \n    AND minutes_to_purchase IS NOT NULL\n\tGROUP BY \n\t\tcampaign_id,\n        campaign_name,\n        campaign_type\n)\nSELECT \n    cs.campaign_id,\n    cs.campaign_name,\n    cs.campaign_type,\n    COUNT(DISTINCT customer_id) as new_customers_with_orders,\n    ROUND(AVG(avg_purchase_value), 2) as avg_purchase_value,\n    SUM(repeat_orders) as total_repeat_orders_campaign,\n    COUNT(CASE WHEN repeat_orders > 0 THEN 1 END) as customers_with_repeat_orders,\n    ROUND(AVG(days_active), 1) as avg_days_active,\n    avg_minutes_to_purchase AS avg_minutes_to_purchase,\n    ROUND((COUNT(CASE WHEN repeat_orders > 0 THEN 1 END)::FLOAT / COUNT(DISTINCT customer_id)::FLOAT) * 100, 2) as repeat_purchase_rate_pct,    \n    total_cost\nFROM customer_spending_summary cs \nLEFT JOIN purchase_duration pd \nON cs.campaign_id = pd.campaign_id\nGROUP BY cs.campaign_id, cs.campaign_name, cs.campaign_type, avg_minutes_to_purchase, total_cost", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_customer_acquisition\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:11.802232Z", "completed_at": "2025-06-04T13:40:11.826287Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:11.832358Z", "completed_at": "2025-06-04T13:40:12.010980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2916557788848877, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_customer_acquisition_segmentation", "compiled": true, "compiled_code": "\n\nSELECT \n\tcampaign_id,\n\tcampaign_name,\n\tcampaign_type,\n\tchannel,\n\tplatform,\n\tCOUNT(DISTINCT customer_id) AS total_acquired_customers\nFROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\" \nWHERE is_new_customer = TRUE AND order_status = 'completed'\nGROUP BY \n\tcampaign_id,\n\tcampaign_name,\n\tcampaign_type,\n\tchannel,\n\tplatform", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_customer_acquisition_segmentation\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.088239Z", "completed_at": "2025-06-04T13:40:12.095760Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.098248Z", "completed_at": "2025-06-04T13:40:12.222184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18290066719055176, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_delivery_zone_heatmap", "compiled": true, "compiled_code": "\n\nWITH zone_metrics AS (\nSELECT \n\tdelivery_zone,\n\tcity,\n\tCOUNT(*) AS total_delivery_request,\n\tCOUNT(CASE WHEN order_status = 'completed' THEN 1 END) AS completed_deliveries,\n\tCOUNT(CASE WHEN order_status = 'canceled' THEN 1 END)  AS cancelation_deliveries,\n    COUNT(CASE WHEN order_status = 'failed' THEN 1 END) AS failure_deliveries,\n    AVG(CASE WHEN order_status = 'completed' THEN delivery_minutes END) AS avg_delivery_time_mins,\n    COUNT(CASE WHEN is_late_delivery = TRUE THEN 1 ELSE NULL END) AS total_late_deliveries,\n    AVG(CASE WHEN is_late_delivery = TRUE THEN delivery_minutes END) AS avg_late_order_time_mins,\n    AVG(CASE WHEN is_late_delivery = FALSE THEN delivery_minutes END) AS avg_ontime_order_time_mins,\n    COUNT(DISTINCT CASE WHEN active_status = 'active' THEN driver_id END) AS active_drivers,\n    COUNT(DISTINCT CASE WHEN active_status = 'inactive' THEN driver_id END) AS inactive_driver,\n    AVG(CASE WHEN order_status = 'completed' THEN delivery_distance_km END) AS avg_delivery_distance_km,\nFROM \"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_order_transactions\"\nGROUP BY delivery_zone, city\n)\nSELECT\n    delivery_zone,\n    city,\n    total_delivery_request,\n    completed_deliveries,\n    ROUND((completed_deliveries * 100.0 / total_delivery_request), 2) AS completed_rate_pct,\n    cancelation_deliveries,\n    ROUND((cancelation_deliveries * 100.0 / total_delivery_request), 2) AS cancelation_rate_pct,\n    failure_deliveries,\n    ROUND((failure_deliveries * 100.0 / total_delivery_request), 2) AS failure_rate_pct,\n    active_drivers,\n    inactive_driver,\n    ROUND((total_delivery_request/ COALESCE(active_drivers, 0)), 2) AS delivery_requests_per_active_driver,\n    ROUND((completed_deliveries/ COALESCE(active_drivers, 0)), 2) AS completed_per_driver,\n    total_late_deliveries,\n    ROUND((total_late_deliveries * 100.0 / completed_deliveries), 2) AS late_delivery_rate_pct,\n    ROUND(avg_delivery_time_mins, 2) AS avg_delivery_time_mins,\n    ROUND(avg_late_order_time_mins, 2) AS avg_late_order_time_mins,\n    ROUND(avg_ontime_order_time_mins, 2) AS avg_ontime_order_time_mins,\n    ROUND(avg_delivery_distance_km, 2) AS avg_delivery_distance_km\nFROM zone_metrics\nORDER BY delivery_zone, city", "relation_name": "\"ae_exam_db\".\"main_report_fleet_management\".\"report_delivery_zone_heatmap\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.277340Z", "completed_at": "2025-06-04T13:40:12.289687Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.290073Z", "completed_at": "2025-06-04T13:40:12.356919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1281566619873047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_driver_performance", "compiled": true, "compiled_code": "\n\nWITH driver_performance AS (\nSELECT \n\tdriver_id,\n\tCOUNT(*) AS tasks_assigned,\n\tCOUNT(CASE WHEN order_status = 'completed' THEN 1 ELSE 0 END) AS tasks_completed,\n    COUNT(CASE WHEN order_status = 'canceled' THEN 1 END) AS tasks_canceled,\n\tCOUNT(CASE WHEN order_status ='failed' THEN 1 END) AS tasks_failed,\n\tROUND(COUNT(CASE WHEN order_status = 'completed' THEN 1 END) * 100.0 / COUNT(*), 2) AS completion_rate_percent,\n    COUNT(CASE WHEN order_status = 'completed' AND is_late_delivery = FALSE THEN 1 END) AS on_time_deliveries,\n    COUNT(CASE WHEN order_status = 'completed' AND is_late_delivery = TRUE THEN 1 END) AS late_deliveries,\n    ROUND(AVG(CASE WHEN order_status = 'completed' THEN delivery_minutes END), 2) AS avg_time_to_complete\nFROM \"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_order_transactions\"\nGROUP BY \n\tdriver_id\n)\nSELECT \n\tdriver_id,\n    tasks_assigned,\n    tasks_completed,\n    tasks_canceled,\n    tasks_failed,\n    completion_rate_percent,\n    on_time_deliveries,\n    late_deliveries,\n    ROUND(late_deliveries * 100.0 / COALESCE(tasks_completed, 0), 2) AS late_delivery_rate_percent,\n    avg_time_to_complete\nFROM driver_performance", "relation_name": "\"ae_exam_db\".\"main_report_fleet_management\".\"report_driver_performance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.407000Z", "completed_at": "2025-06-04T13:40:12.412884Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.413474Z", "completed_at": "2025-06-04T13:40:12.471804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11296391487121582, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_driver_performance_by_zone_vehicle", "compiled": true, "compiled_code": "\n\nWITH driver_performance AS (\nSELECT \n\tdriver_region,\n\tdelivery_zone,\n\tvehicle_type,\n\tCOUNT(*) AS tasks_assigned,\n\tCOUNT(CASE WHEN order_status = 'completed' THEN 1 ELSE 0 END) AS tasks_completed,\n    COUNT(CASE WHEN order_status = 'canceled' THEN 1 END) AS tasks_canceled,\n\tCOUNT(CASE WHEN order_status ='failed' THEN 1 END) AS tasks_failed,\n\tROUND(COUNT(CASE WHEN order_status = 'completed' THEN 1 END) * 100.0 / COUNT(*), 2) AS completion_rate_percent,\n    COUNT(CASE WHEN order_status = 'completed' AND is_late_delivery = FALSE THEN 1 END) AS on_time_deliveries,\n    COUNT(CASE WHEN order_status = 'completed' AND is_late_delivery = TRUE THEN 1 END) AS late_deliveries,\n    ROUND(AVG(CASE WHEN order_status = 'completed' THEN delivery_minutes END), 2) AS avg_time_to_complete\nFROM \"ae_exam_db\".\"main_data_mart_fleet_management\".\"model_mart_driver_order_transactions\"\nGROUP BY \n\tdriver_region,\n\tdelivery_zone,\n\tvehicle_type\n)\nSELECT \n\tdriver_region,\n\tdelivery_zone,\n\tvehicle_type,\n    tasks_assigned,\n    tasks_completed,\n    tasks_canceled,\n    tasks_failed,\n    completion_rate_percent,\n    on_time_deliveries,\n    late_deliveries,\n    ROUND(late_deliveries * 100.0 / COALESCE(tasks_completed, 0), 2) AS late_delivery_rate_percent,\n    avg_time_to_complete\nFROM driver_performance", "relation_name": "\"ae_exam_db\".\"main_report_fleet_management\".\"report_driver_performance_by_zone_vehicle\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.523695Z", "completed_at": "2025-06-04T13:40:12.527344Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.527973Z", "completed_at": "2025-06-04T13:40:12.586079Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10079646110534668, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_retargeting_performance", "compiled": true, "compiled_code": "\n\nWITH retargeting_customers AS (\n\t SELECT\n        customer_id,\n        campaign_id,\n        campaign_name,\n        campaign_type,\n        customer_segment,\n        MIN(interaction_datetime) AS first_retargeting_interaction,\n        MIN(CASE WHEN order_status = 'completed' THEN order_datetime END) AS first_order_after_retargeting,\n        SUM(CASE WHEN order_status = 'completed' THEN revenue ELSE 0 END) as customer_spend_after_retargeting\n    FROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\"\n    WHERE campaign_type = 'retargeting' AND customer_segment IN ('churn_risk', 'inactive') \n    AND (customer_segment = 'loyal' AND customer_status = 'inactive')\n    GROUP BY \n    \tcustomer_id, \n    \tcampaign_id, \n    \tcampaign_name, \n    \tcampaign_type, \n    \tcustomer_segment\t\n)\n, customer_order_before_retargeting AS (\n\tSELECT \n        rc.customer_id,\n        rc.campaign_id,\n        MAX(oh.order_datetime) as last_order_before_retargeting\n    FROM retargeting_customers rc\n    LEFT JOIN \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_interacting_customer_orders\" oh \n        ON rc.customer_id = oh.customer_id \n        AND oh.order_datetime < rc.first_retargeting_interaction\n        AND oh.order_status = 'completed'\n    GROUP BY rc.customer_id, rc.campaign_id\n)\nSELECT \n\trc.campaign_id,\n    rc.campaign_name,\n    rc.campaign_type,\n    rc.customer_segment,\n    COUNT(DISTINCT rc.customer_id) AS total_previously_active_customers, \n    COUNT(DISTINCT CASE WHEN rc.first_order_after_retargeting IS NOT NULL THEN rc.customer_id END) as total_returning_customers,\n    ROUND((COUNT(DISTINCT CASE WHEN rc.first_order_after_retargeting IS NOT NULL THEN rc.customer_id END)::FLOAT / \n         COUNT(DISTINCT rc.customer_id)::FLOAT) * 100, 2\n    ) as return_rate_pct, -- TOTAL_RETURNING_CUSTOMERS/ TOTAL_TARGETED_CUSTOMERS * 100 \n    SUM(rc.customer_spend_after_retargeting) as total_spend_generated,\n    AVG(rc.customer_spend_after_retargeting) as avg_spend_per_customer,\n    ROUND(AVG(CASE \n            WHEN cb.last_order_before_retargeting IS NOT NULL AND rc.first_order_after_retargeting IS NOT NULL\n            THEN DATEDIFF('day', cb.last_order_before_retargeting, rc.first_order_after_retargeting)\n        END), 1\n    ) as avg_days_gap_to_return\nFROM retargeting_customers rc\nLEFT JOIN customer_order_before_retargeting cb \nON rc.customer_id = cb.customer_id \nAND rc.campaign_id = cb.campaign_id\nGROUP BY \n    rc.campaign_id, \n    rc.campaign_name, \n    rc.campaign_type, \n    rc.customer_segment", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_retargeting_performance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.627451Z", "completed_at": "2025-06-04T13:40:12.630127Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.630437Z", "completed_at": "2025-06-04T13:40:12.737360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15218329429626465, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_retargeting_retention_behavior", "compiled": true, "compiled_code": "\n\nWITH retargeting_customers AS (\n\tSELECT \n\t\tcustomer_id,\n\t    campaign_id,\n\t    campaign_name,\n\t    campaign_type,\n\t    customer_segment,\n\t    MIN(CASE WHEN order_status = 'completed' THEN order_datetime END) AS first_return_order_date\n    FROM \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_campaign_interactions\"\n    WHERE campaign_type = 'retargeting'\n    GROUP BY \n    \tcustomer_id,\n    \tcampaign_id,\n    \tcampaign_name,\n    \tcampaign_type,\n    \tcustomer_segment\n)\n, post_return_orders AS (\n    SELECT \n        rc.customer_id,\n        rc.campaign_id,\n        rc.campaign_name,\n        rc.customer_segment,\n        rc.first_return_order_date,\n        MAX(oh.order_datetime) AS recent_day_customers_purchase\n    FROM retargeting_customers rc \n    LEFT JOIN \"ae_exam_db\".\"main_data_mart_performance_marketing\".\"model_mart_interacting_customer_orders\" oh \n    ON rc.customer_id = oh.customer_id \n    AND oh.order_datetime > rc.first_return_order_date\n    AND oh.order_status = 'completed'\n    WHERE first_return_order_date IS NOT NULL\n    GROUP BY \n        rc.customer_id,\n        rc.campaign_id,\n        rc.campaign_name,\n        rc.customer_segment,\n        rc.first_return_order_date\n)\nSELECT \n\tcampaign_id,\n    campaign_name,\n    customer_segment,\n    AVG(DATEDIFF('day', first_return_order_date, recent_day_customers_purchase)) AS avg_days_active_after_return\nFROM post_return_orders\nGROUP BY \n\tcampaign_id,\n    campaign_name,\n    customer_segment", "relation_name": "\"ae_exam_db\".\"main_report_performance_marketing\".\"report_retargeting_retention_behavior\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.798767Z", "completed_at": "2025-06-04T13:40:12.811798Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.813266Z", "completed_at": "2025-06-04T13:40:12.909542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16256141662597656, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_driver_related_complaints", "compiled": true, "compiled_code": "\n\nWITH driver_metrics AS (\n    SELECT \n        driver_id,\n        COUNT(DISTINCT order_id) AS total_orders,\n        COUNT(DISTINCT CASE WHEN ticket_id IS NOT NULL THEN ticket_id END) AS total_complaints,\n        COUNT(DISTINCT CASE WHEN issue_type = 'rider' AND issue_sub_type = 'no_mask' AND ticket_id IS NOT NULL THEN ticket_id END) AS rider_no_mask_complaints,\n        COUNT(DISTINCT CASE WHEN issue_type = 'rider' AND issue_sub_type = 'rude' AND ticket_id IS NOT NULL THEN ticket_id END) AS rider_rude_complaints,\n        COUNT(CASE WHEN issue_type = 'delivery' AND issue_sub_type = 'late' AND ticket_id IS NOT NULL THEN ticket_id END) AS delivery_late_complaints,\n        COUNT(CASE WHEN issue_type = 'delivery' AND issue_sub_type = 'not_delivered' AND ticket_id IS NOT NULL THEN ticket_id END) AS not_delivered_complaints,\n        ROUND(AVG(CASE WHEN ticket_id IS NOT NULL THEN resolved_duration_hours END), 2) AS avg_resolution_hours,\n        ROUND(AVG(CASE WHEN ticket_id IS NOT NULL THEN csat_score END), 2) AS avg_csat_score\n    FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_driver_related_tickets\"\n    WHERE driver_id IS NOT NULL \n    GROUP BY driver_id \n)\nSELECT \n    driver_id,\n    total_orders,\n    total_complaints,\n    rider_no_mask_complaints,\n    rider_rude_complaints\n    delivery_late_complaints,\n    not_delivered_complaints,\n    ROUND((total_complaints/ total_orders)*100.0, 2) AS complaint_rate_pct,\n    avg_resolution_hours,\n    avg_csat_score\nFROM driver_metrics", "relation_name": "\"ae_exam_db\".\"main_report_customer_service\".\"report_driver_related_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:12.962752Z", "completed_at": "2025-06-04T13:40:12.965642Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:12.965970Z", "completed_at": "2025-06-04T13:40:13.101796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18949580192565918, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_restaurant_quality_complaint", "compiled": true, "compiled_code": "\n\nWITH restaurant_complaints AS (\n    SELECT\n        restaurant_id,\n        customer_id,\n        MIN(opened_datetime) AS first_complaint_date\n    FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_restaurant_related_tickets\"\n    WHERE ticket_id IS NOT NULL AND issue_type = 'food'\n    GROUP BY restaurant_id, customer_id\n),\ncustomer_returns AS (\n    SELECT\n        mart.restaurant_id,\n        COUNT(DISTINCT CASE \n\t        WHEN mart.order_status = 'completed' AND mart.order_datetime > rc.first_complaint_date AND mart.ticket_id IS NULL  \n            THEN mart.customer_id \n        END) AS total_customers_return\n    FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_restaurant_related_tickets\" mart\n    JOIN restaurant_complaints rc \n    ON mart.restaurant_id = rc.restaurant_id \n    AND mart.customer_id = rc.customer_id  \n    GROUP BY mart.restaurant_id\n),\nrestaurant_metrics AS (\n    SELECT\n        main.restaurant_id,\n        COUNT(DISTINCT order_id) AS total_orders,\n        COUNT(CASE WHEN ticket_id IS NOT NULL THEN 1 END) AS total_complaints,\n        COUNT(DISTINCT CASE WHEN issue_type = 'food' AND issue_sub_type = 'wrong_item' AND ticket_id IS NOT NULL THEN ticket_id END) AS food_wrong_item_complaints,\n        COUNT(DISTINCT CASE WHEN issue_type = 'food' AND issue_sub_type = 'cold' AND ticket_id IS NOT NULL THEN ticket_id END) AS food_cold_complaints,\n        ROUND(AVG(CASE WHEN ticket_id IS NOT NULL THEN resolved_duration_hours END), 2) AS avg_resolution_hours,\n        SUM(CASE WHEN ticket_id IS NOT NULL AND compensation_amount IS NOT NULL THEN compensation_amount END) AS total_compensation,\n        COUNT(DISTINCT CASE WHEN ticket_id IS NOT NULL AND issue_type = 'food' THEN customer_id END) AS total_customers_complained,\n        COALESCE(cr.total_customers_return, 0) AS total_customers_return\n    FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_restaurant_related_tickets\" AS main\n    LEFT JOIN customer_returns AS cr ON main.restaurant_id = cr.restaurant_id\n    GROUP BY main.restaurant_id, cr.total_customers_return  \n)\nSELECT \n    restaurant_id,\n    total_orders,\n    total_complaints,\n    ROUND(CASE WHEN total_orders <> 0 THEN (total_complaints * 100.0 / total_orders) END, 2) AS complaint_pct,\n    food_wrong_item_complaints,\n    food_cold_complaints,\n    avg_resolution_hours,\n    total_compensation,\n    total_customers_complained,\n    total_customers_return,\n    ROUND(CASE WHEN total_customers_complained <> 0 THEN (total_customers_return * 100.0 / total_customers_complained) END, 2) AS customer_retention_rate_percent\nFROM restaurant_metrics", "relation_name": "\"ae_exam_db\".\"main_report_customer_service\".\"report_restaurant_quality_complaint\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:13.157100Z", "completed_at": "2025-06-04T13:40:13.162289Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:13.164100Z", "completed_at": "2025-06-04T13:40:13.349507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24111509323120117, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_complaint_summary_by_issue_types", "compiled": true, "compiled_code": "\n\nSELECT \n\tissue_type,\n\tissue_sub_type,\n\tCOUNT(*) AS total_reported_count,\n\tROUND((COUNT(*) / (SELECT COUNT(*) FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_support_tickets\")) * 100, 2) AS pct_of_total,\n\tCOUNT(CASE WHEN status = 'resolved' AND resolved_datetime IS NOT NULL  THEN 1 END) AS resolved_count,\n    ROUND(COUNT(CASE WHEN resolved_datetime IS NOT NULL THEN 1 END) * 100.0 / COUNT(*), 2) AS resolution_rate_percent,\n\tROUND(AVG(CASE WHEN status = 'resolved' AND resolved_datetime IS NOT NULL \n\t    THEN  resolved_duration_hours\n\tEND), 2)  AS avg_resolution_time_hours,\n\tROUND(AVG(CASE WHEN compensation_amount > 0 THEN compensation_amount END), 2) AS avg_compensation_paid,\n\tROUND(SUM(compensation_amount), 2) AS total_compensation_paid\nFROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_support_tickets\"\nGROUP BY \n\tissue_type,\n\tissue_sub_type", "relation_name": "\"ae_exam_db\".\"main_report_customer_service\".\"report_complaint_summary_by_issue_types\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-04T13:40:13.401235Z", "completed_at": "2025-06-04T13:40:13.407226Z"}, {"name": "execute", "started_at": "2025-06-04T13:40:13.408432Z", "completed_at": "2025-06-04T13:40:13.549652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2611396312713623, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.lmwn_ae_exam.report_complaint_summary_over_time", "compiled": true, "compiled_code": "\n\nWITH issue_rankings AS (\n    SELECT \n        YEAR,\n        MONTH,\n        day_type,\n        day_name,\n        issue_type,\n        issue_sub_type,\n        COUNT(*) AS issue_count,\n        DENSE_RANK() OVER (PARTITION BY YEAR, MONTH, day_type, day_name ORDER BY COUNT(*) DESC) AS issue_rank\n    FROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_support_tickets\"\n    GROUP BY YEAR, MONTH, day_type, day_name, issue_type, issue_sub_type\n)\n, most_common_issues AS (\n    SELECT \n        YEAR,\n        MONTH,\n        day_type,\n        day_name,\n        issue_type AS most_common_issue_type,\n        issue_sub_type AS most_common_issue_sub_type,\n        issue_count AS most_common_issue_count\n    FROM issue_rankings\n    WHERE issue_rank = 1\n)\nSELECT\n    st.YEAR,\n    st.MONTH,\n    st.day_type,\n    st.day_name,\n    COUNT(*) AS total_issues_reported,\n    COUNT(CASE WHEN st.status = 'resolved' AND st.resolved_datetime IS NOT NULL THEN 1 END) AS resolved_count,\n    ROUND(COUNT(CASE WHEN st.resolved_datetime IS NOT NULL THEN 1 END) * 100.0 / COUNT(*), 2) AS resolution_rate_percent,\n    ROUND(AVG(\n        CASE WHEN st.status = 'resolved' AND st.resolved_datetime IS NOT NULL\n        THEN resolved_duration_hours\n        END), 2) AS avg_resolution_time_hours,\n    ROUND(AVG(CASE WHEN st.compensation_amount > 0 THEN st.compensation_amount END), 2) AS avg_compensation_paid,\n    ROUND(SUM(st.compensation_amount), 2) AS total_compensation_paid,\n    mci.most_common_issue_type,\n    mci.most_common_issue_sub_type,\n    mci.most_common_issue_count\nFROM \"ae_exam_db\".\"main_data_mart_customer_service\".\"model_mart_support_tickets\" st\nLEFT JOIN most_common_issues mci \n    ON st.YEAR = mci.YEAR \n    AND st.MONTH = mci.MONTH \n    AND st.day_type = mci.day_type \n    AND st.day_name = mci.day_name\nGROUP BY\n    st.YEAR,\n    st.MONTH,\n    st.day_type,\n    st.day_name,\n    mci.most_common_issue_type,\n    mci.most_common_issue_sub_type,\n    mci.most_common_issue_count", "relation_name": "\"ae_exam_db\".\"main_report_customer_service\".\"report_complaint_summary_over_time\"", "batch_results": null}], "elapsed_time": 7.934552192687988, "args": {"show_resource_report": false, "print": true, "log_format": "default", "partial_parse": true, "populate_cache": true, "cache_selected_only": false, "which": "run", "favor_state": false, "macro_debugging": false, "select": [], "log_format_file": "debug", "log_path": "/home/cherraimm/lmwn/lmwn_ae_exam/logs", "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_vars": false, "version_check": true, "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": [], "defer": false, "use_colors_file": true, "require_nested_cumulative_type_params": false, "project_dir": "/home/cherraimm/lmwn/lmwn_ae_exam", "require_yaml_configuration_for_mf_time_spines": false, "write_json": true, "strict_mode": false, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "require_batched_execution_for_custom_microbatch_strategy": false, "profiles_dir": ".", "quiet": false, "invocation_command": "dbt run", "state_modified_compare_more_unrendered_values": false, "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false, "static_parser": true, "empty": false, "partial_parse_file_diff": true, "log_level": "info", "use_colors": true, "source_freshness_run_project_hooks": false, "send_anonymous_usage_stats": true, "printer_width": 80, "vars": {}, "introspect": true}}